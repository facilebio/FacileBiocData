% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api.R, R/bioc-DESeqDataSet.R, R/bioc-DGEList.R
\docType{class}
\name{FacileBiocDataStore-class}
\alias{FacileBiocDataStore-class}
\alias{facilitate}
\alias{FacileBiocDataStore}
\alias{facilitate.DESeqDataSet}
\alias{facilitate.DGEList}
\title{Immerse bioconductor assay containers into the facile.bio ecosystem.}
\usage{
\method{facilitate}{DESeqDataSet}(
  x,
  assay_type = "rnaseq",
  feature_type = "infer",
  organism = "unknown",
  ...,
  run_vst = NULL,
  blind = TRUE,
  nsub = 1000,
  fitType = "parametric",
  verbose = FALSE
)

\method{facilitate}{DGEList}(
  x,
  assay_type = "rnaseq",
  feature_type = "infer",
  organism = "unknown",
  ...
)
}
\arguments{
\item{assay_type}{A string that indicates the type of assay stored in the
primary assay of the container. For some assay containers, like
\code{DESeqDataSet}, \code{DGEList}, and \code{SingleCellExperiment}, we can assume the
default value for this to be \code{"rnaseq"}. For the rest, we assume it's
\code{"lognorm"}.}

\item{feature_type}{A string that indicates the type of features identifiers
the assay containers is using. Default is \code{"infer"} to try to guess, but
this is not the most accurate.}

\item{organism}{the organism the dataset is for (Homo sapiens, Mus musculus,
etc.)}

\item{run_vst}{should we re-run the vst transformation for a DESeqDataSet.
If the \code{DESeqDataSet} already has a \code{"vst"} assay, then we'll just take
that, otherwise if this isn't set to \code{FALSE} it will be run.}

\item{blind, nsub, fitType}{parameters to send to \code{\link[DESeq2:vst]{DESeq2::vst()}} to tweak
how it is run internally}

\item{verbose}{make some noise}
}
\description{
Bioconductor assay containers, like a DGEList, DESeqDataSet,
SummarizedExperiment, etc. can be used within the facie.bio ecosystem by
invoking the \code{facilitate()} method on them. This will return a \verb{Facile*}
subclass of the container itself.
}
\details{
For instance, \code{facilitate(DGEList)} will return a \code{FacileDGEList}, which can
be used a "normal" DGEList in all the same ways, but is also wrapped with
the facile api api and can be used by methods withing the \code{FacileAnalysis},
for instance.

These classes are also all subclass of the abstract \code{FacileBiocDataStore}
virtual class.
}
\section{DESeqDataSet}{

When a DESeqDataSet object is facilitate()'d, a normalized count matrix
will be calculated using \code{DESeq2::counts(x, normalized = TRUE)} and stored as
a matrix named \code{"normcounts"} in its \code{assays()} list. These are the values
that are returned by (fetch|with)_assay_data when \code{normalized = TRUE}, which
differs from the edgeR:cpm normalized count data which is usually returned
from most every other expression container.

By default, these normalized counts will be log2 transformed when returned to
conform to the expectation in the facilebio ecosystem. To get the deault
DESeq2 behaviour, the user would use
\code{fetch_assay_data(.., normalized = TRUE, log = FALSE)}.

This function will also look for variance stabilized versions of the
data in the \code{"vst"} and \code{"rlog"} assay matrices. If no \code{"vst"} assay is
present, it will be run and stored there, unless the \verb{facilitate,run_vst}
parameter is set to \code{FALSE}. This data can be returned using
\code{assay_name = "vst"}
}

\section{DGEList}{

We assume the DGEList holds \code{"rnaseq"} assay data. Set the \code{assay_type}
parameter if that's not the case.
}

\examples{
# DESeq2 --------------------------------------------------------------------
dds <- DESeq2::makeExampleDESeqDataSet(n=2000, m=20)
fd <- facilitate(dds)
fetch_assay_data(samples(fd), c("gene1", "gene20"))
fetch_assay_data(samples(fd), c("gene1", "gene20"), normalized = TRUE)

samples(fd) \%>\%
  with_assay_data(c("gene1", "gene20"), normalized = TRUE)

# Retrieiving different flavors of normalized expression data
dat <- samples(fd) \%>\%
  with_assay_data("gene1", normalized = TRUE) \%>\%
  with_assay_data("gene1", assay_name = "vst") \%>\%
  select(-(1:2))
colnames(dat) <- c("normcounts", "vst")
pairs(dat)

\dontrun{
dpca <- FacileAnalysis::fpca(fd, assay_name = "vst")
}
# edgeR ---------------------------------------------------------------------
y <- example_bioc_data(class = "DGEList")
yf <- facilitate(y)
FacileAnalysis::fpca(yf)
}
